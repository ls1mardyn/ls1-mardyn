//
// Created by Heier on 07/29/2020.
//

#include "Virial2DProfile.h"

#include "DensityProfile.h"
#include "DOFProfile.h"
#include "KineticProfile.h"
#include "../FixRegion.h"
#include "Simulation.h"

void Virial2DProfile::output(std::string prefix, long unsigned accumulatedDatasets) {

	Log::global_log->info() << "[VirialProfile2D] output" << std::endl;

	// Setup outfile
	_accumulatedDatasets = accumulatedDatasets;
	_profilePrefix = prefix + ".Vipr";
	std::ofstream outfile(_profilePrefix.c_str());
	outfile.precision(6);


	// Write Header
	outfile << "//Segment volume: " << _samplInfo.segmentVolume << "\n//Accumulated data sets: " << _accumulatedDatasets
			<< "\n//Local profile of the partial pressures p = (px+py+pz)/3). Output file generated by the \"VirialProfile\" method, plugins/profiles. \n";
	outfile << "// \t dX \t dY \t dZ \n";
	outfile << "\t" << 1 / _samplInfo.universalInvProfileUnit[0] << "\t" << 1 / _samplInfo.universalInvProfileUnit[1]
			<< "\t" << 1 / _samplInfo.universalInvProfileUnit[2] << "\n";
	outfile << "0 \t";

	writeMatrix(outfile);

	outfile.close();
}

void Virial2DProfile::writeDataEntry(unsigned long uID, std::ofstream &outfile) const {


	// calculate global temperature
	double globalTemperature = global_simulation->getDomain()->getCurrentTemperature(0);

	//calculate global temperature if fixedRegion is applied
	unsigned long numMolFixRegion = _samplInfo.numMolFixRegion;
	double globalTemperatureFixRegion = globalTemperature * _samplInfo.globalNumMolecules / (_samplInfo.globalNumMolecules - numMolFixRegion);

	long double virial2Dx = 0.0;
	long double virial2Dy = 0.0;
	long double virial2Dz = 0.0;

	long double N = _densityProfile->getGlobalNumber(uID);
	long double Px = this->_global3dProfile.at(uID)[0];
	long double Py = this->_global3dProfile.at(uID)[1];
	long double Pz = this->_global3dProfile.at(uID)[2];

	virial2Dx = (globalTemperatureFixRegion* N + Px)/(_samplInfo.segmentVolume * _accumulatedDatasets);
	virial2Dy = (globalTemperatureFixRegion* N + Py)/(_samplInfo.segmentVolume * _accumulatedDatasets);
	virial2Dz = (globalTemperatureFixRegion* N + Pz)/(_samplInfo.segmentVolume * _accumulatedDatasets);

	outfile << (virial2Dx + virial2Dy + virial2Dz)/3 << "\t";

}

