/*
 * MardynConfigLegacyWriter.cpp
 *
 * @Date: 13.09.2011
 * @Author: eckhardw
 */

#include "MardynConfigLegacyWriter.h"
#include "MardynConfiguration.h"
#include <fstream>


void writeOutputConfig(std::ofstream& output, const OutputConfiguration& config) {
	output << "output " << config.getName() << " " << config.getOutputFrequency() << " " << config.getOutputPrefix() << std::endl;
}

MardynConfigLegacyWriter::MardynConfigLegacyWriter() {
}

MardynConfigLegacyWriter::~MardynConfigLegacyWriter() {
}

void MardynConfigLegacyWriter::writeConfigFile(const std::string& directory, const std::string& fileName,
		const MardynConfiguration& config) {

	std::string fullName = directory + "/" + fileName;
	std::ofstream output(fullName.c_str());
	output << "MDProjectConfig\n" << std::endl;

	output << "# THIS CONFIGURATION WAS GENERATED BY THE SCENARIO-GENERATOR!\n" << std::endl;

	output << "timestepLength " << config.getTimestepLength() << std::endl;
	output << "cutoffRadius " << config.getCutoffRadius() << std::endl;
	output << "LJCutoffRadius " << config.getLJCutoffRadius() << std::endl;
	output << "phaseSpaceFile OldStyle " << config.getScenarioName() << ".inp" << std::endl;
	if (config.getParallelisationTypeString() != MardynConfiguration::ParallelisationType_NONE) {
		output << "parallelization " << config.getParallelisationTypeString() << std::endl;
	}
	output << "datastructure " << config.getContainerTypeString() << " 1" << std::endl;

	output << std::endl;
	if (config.isNVE()) {
		output << "NVE" << std::endl << std::endl;
	}

	if (config.hasResultWriter()) {
		writeOutputConfig(output, config.getResultWriterConfig());
	}
	if (config.hasStatisticsWriter()) {
		writeOutputConfig(output, config.getStatisticsWriterConfig());
	}
	if (config.hasVTKMoleculeWriter()) {
		writeOutputConfig(output, config.getVtkMoleculeWriterConfig());
	}
	if (config.hasVTKGridWriter()) {
		writeOutputConfig(output, config.getVtkGridWriterConfig());
	}
	output.close();
}
