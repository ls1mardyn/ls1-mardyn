<?xml version='1.0' encoding='UTF-8'?>
<mardyn version="20100525" >
  <!-- Set the global log level. Possible values: NONE, FATAL ERROR, ERROR, WARNING, INFO, DEBUG, ALL. Defaults to INFO if unspecified -->
  <loglevel>INFO</loglevel>
  <refunits type="SI" >
<!-- standard units - should be  used for internal reduction one day, but default for all values in simulation remain "reduced" -->
    <length unit="nm">0.35</length>	<!-- default: nm - also m,pm,fm or Angstroem may be used in the future? -->
    <mass unit="g">1.0959555966678e-22</mass> <!-- also atomistic mass unit Dalton "u" in the future? -->
    <energy unit="K">100.0</energy> <!-- again: offer other units -->
  </refunits>

  <!-- simulation options -->
  <simulation type="MD" >
    <!-- block for misc options -->
    <options>
      <!-- immediately after filling the simulation with particles, reset all id's to start at zero and are consecutive -->
      <option name="refreshIDs">true</option>
    </options>

    <run>
      <currenttime>0</currenttime>
      <production>
        <steps>100000</steps>
      </production>
      <equilibration>
        <steps>20000</steps>
      </equilibration>
    </run>

    <!-- When compiled with RMM=1 use -->
    <!--<integrator type="LeapfrogRMM" >-->
    <integrator type="Leapfrog" >
      <!-- MD ODE integrator -->
      <timestep unit="reduced" >0.01</timestep>
    </integrator>
    <ensemble type="NVT">
      <!--Ensemble is the main topic of the simulation -->
      <Nparticles>40000</Nparticles>
      <temperature unit="reduced" >0.7</temperature>	<!-- in future also units="K" -->
      <domain type="box">
          <lx unit="reduced">97.</lx>
          <ly unit="reduced">97.</ly>
          <lz unit="reduced">97.</lz>
      </domain>
      <!-- instead of lx/ly/lz we might accept density -->
      <components>
          <moleculetype id="1" >
            <coord_base>principal_axes</coord_base>
            <site type="LJ126" id="1" >
              <coords> <x>0.0</x> <y>0.0</y> <z>0.0</z> </coords>
              <mass>12.00</mass>
              <sigma>2.900109</sigma>
              <epsilon>11.692625</epsilon>
            </site>
            <site type="Charge" id="2" >
              <coords> <x>0.0</x> <y>0.0</y> <z>-1.212237</z> </coords>
              <mass>16.00</mass>
              <charge>-1.0</charge>
            </site>
            <site type="Dipole" id="3" >
              <coords> <x>0.0</x> <y>0.0</y> <z>1.212237</z> </coords>
              <dipolemoment>
                <!-- absolute value of the dipole moment -->
                <abs>7.34</abs>
                <!-- unit vector corrdinates specifying the orietation of the dipole -->
                <x>1.0</x> <y>0.0</y> <z>0.0</z>
              </dipolemoment>
            </site>
            <site type="Quadrupole" id="4" >
              <coords> <x>0.0</x> <y>0.0</y> <z>0.0</z> </coords>
              <quadrupolemoment>
                <!-- absolute value of the quadrupole moment -->
                <abs>3.76</abs>
                <!-- unit vector corrdinates specifying the orietation of the quadrupole -->
                <x>1.0</x> <y>0.0</y> <z>0.0</z>
              </quadrupolemoment>
            </site>
            <momentsofinertia>
              <Ixx>47.02459341</Ixx>
              <Iyy>47.02459341</Iyy>
              <Izz>47.02459341</Izz>
            </momentsofinertia>
          </moleculetype>

          <mixing>
            <rule type="LB" cid1="1" cid2="2">
              <eta>1.0</eta>
              <xi>1.023</xi>
            </rule>
          </mixing>
      </components>

      <!-- Definition of the Phasespacepoint
           can be read from file or generated by the MarDyn internally
      -->
      <phasespacepoint>
        <!-- Read in old ASCII phase spcae file (skipping old phase space header information) -->
        <file type="ASCII" >test.inp</file>
        <!-- Alternative: binary checkpoints -->
        <file type="binary">
            <header>cp_binary-1.restart.header.xml</header>
            <data>cp_binary-1.restart.dat</data>
        </file>


        <generator name="ReplicaGenerator">
          <!-- Define system type -->
          <!-- possible values:
            - homogeneous
            - heterogeneous_VLV
            - heterogeneous_LV
            -->
          <type>homogeneous</type>
          <!-- Files to be replicated -->
          <files>
            <!-- always used -->
            <vapor>
              <header>vapor_cp_binary-0.restart.header.xml</header>
              <data>vapor_cp_binary-0.restart.dat</data>
            </vapor>
            <!-- only used for heterogeneous cases -->
            <liquid>
              <header>liquid_cp_binary-0.restart.header.xml</header>
              <data>liquid_cp_binary-0.restart.dat</data>
            </liquid>
          </files>

          <!-- number of block replications -->
          <numblocks>
            <!-- number of blocks to be replicated along x and z axis EACH -->
            <xz>5</xz>
            <!-- number of vapor blocks along y axis -->
            <vapor>5</vapor>
            <!-- number of vapor blocks along y axis -->
            <!-- only used for heterogeneous cases -->
            <liquid>5</liquid>
          </numblocks>
          <!-- Molecule diameter, used for spacing between phases -->
          <diameter>1.0</diameter>
          <componentIDs>
            <vapor>
              <change> <from>1</from> <to>2</to> </change>
            </vapor>
            <liquid>
              <change> <from>1</from> <to>1</to> </change>
            </liquid>
          </componentIDs>
        </generator>

        <!-- options for internal mkesfera generator -->
        <generator src="internal" id="mkesfera" >
          <droplet>
            <center> <x>0.0</x> <y>0.0</y> <z>0.0</z> </center>
            <radius>25</radius>
            <density>0.6</density>
          </droplet>
          <outer-density>0.06</outer-density>
        </generator>

        <!-- options for internal mkTcTS generator -->
        <generator name="mkTcTS">
          <layer1>
            <density>0.06482</density>
          </layer1>
          <layer2>
            <density>0.6223</density>
          </layer2>
        </generator>

        <!-- options for internal grid generator -->
        <generator src="internal" id="GridGenerator" >
          <lattice type="cubic" centering="face">
            <!-- automatically determined if density and num particles is given -->
			<vec id="a"> <x>1.0</x> <y>0.0</y> <z>0.0</z> </vec>
			<vec id="b"> <x>0.0</x> <y>1.0</y> <z>0.0</z> </vec>
			<vec id="c"> <x>0.0</x> <y>0.0</y> <z>1.0</z> </vec>
            <dims a="2" b="2" c="2" />
          </lattice>
          <basis>
            <site>
              <componentid>1</componentid>
              <coordinate x="0.0" y="0.0" z="0.0" />
            </site>
          </basis>
          <origin> <x>0.0</x> <y>0.0</y> <z>0.0</z> </origin>
        </generator>

      </phasespacepoint>
    </ensemble>

    <!-- algorithm specific configuration options -->
    <algorithm>
      <parallelisation type="DomainDecomposition">
          <CommunicationScheme>direct</CommunicationScheme>
          <timerForLoad>SIMULATION_FORCE_CALCULATION</timerForLoad><!-- Timer to use as load. requires valid timer name! -->
          <overlappingCollectives>False</overlappingCollectives> <!-- true if overlapping collectives should be used, false otherwise. REQUIRES MPI>=3! -->
          <overlappingStartAtStep>5</overlappingStartAtStep> <!-- Start overlapping at given step (default: 5), only relevant if overlappingCollectives==True -->
          <overlappingP2P>False</overlappingP2P> <!-- Defines whether to use overlapping p2p communication or not. Default: False -->
      </parallelisation>
      <parallelisation type="StaticIrregDomainDecomposition">
          <!-- Provide weights that determine the relative widths of each subdomain
          EX: The weights in <x> being 1,2,1 defines an x axis with subdomain lengths in the 1:2:1 ratio
          The number of digits per column are the number of ranks in that column, and the number of columns need not be equal per row
          The number of ranks per row are therefore calculated from the column length, and cannot be given explicitly
          The program must be run with ranks equal to the ranks in the weights (examples/Mamico-couette/ls1configNoCP.xml must be run with 6 ranks, for example)
          The actual subdomain lengths are calculated from the total length and given ratios
          If not given, default behaviour is an equally spaced grid, same as DomainDecomposition
            -->
          <subdomainWeights>
            <x>INT,INT,INT,...</x>
            <y>INT,INT,INT,...</y>
            <z>INT,INT,INT,...</z> 
          </subdomainWeights>
      </parallelisation>
      <parallelisation type="GeneralDomainDecomposition">
          <updateFrequency>INTEGER</updateFrequency>
          <initialPhaseTime>INTEGER</initialPhaseTime><!--time for initial rebalancing phase-->
          <initialPhaseFrequency>INTEGER</initialPhaseFrequency><!--frequency for initial rebalancing phase-->
          <gridSize>STRING</gridSize><!--default: 0; if non-zero, the process boundaries are fixed to multiples of
              gridSize. Comma separated string to define three different grid sizes for the different dimensions is
              possible.-->
          <loadBalancer type="STRING"><!--STRING...type of the load balancer, currently supported: ALL-->
          </loadBalancer>
      </parallelisation>
      <datastructure type="LinkedCells">
          <cellsInCutoffRadius>1</cellsInCutoffRadius>
          <!-- select traversal algorithm
          possible values are:
            - original
            - c04
            - c08        (default for >1 threads)
            - c08es      (eight-shell)
            - quicksched
            - sliced     (default for <2 threads)
            - hs         (half shell method)
            - mp         (mid point method)
            - nt         (neutral territory method)
            -->
          <traversalSelector>c08</traversalSelector>
          <!-- override default block size (2x2x2) for quicksched tasks -->
          <traversalData type="quicksched">
            <taskBlockSize>
              <lx>2</lx>
              <ly>2</ly>
              <lz>2</lz>
            </taskBlockSize>
          </traversalData>
      </datastructure>

      <datastructure type="AutoPas">
        <!-- for a list of possible options see the setter functions in https://www5.in.tum.de/AutoPas/doxygen_doc/master/classautopas_1_1AutoPas.html -->
        <!-- for possible values see the respective options in https://www5.in.tum.de/AutoPas/doxygen_doc/master/namespaceautopas_1_1options.html-->

        <!-- specify all allowed traversals as a comma separated list -->
        <allowedTraversals>c08, sli</allowedTraversals>
        <!-- specify all allowed containers as a comma separated list -->
        <!-- possible values include:
           - DirectSum
           - LinkedCells
           - VerletLists
           - VerletListsCells
           - VerletClusterLists
           - VarVerletListsAsBuild
           - VerletClusterCells
        -->
        <allowedContainers>linkedCells, verletlists, verletclusterlists</allowedContainers>
        <!-- specify what metric the selector should use to determine the optimal traversal -->
        <!-- possible values: fastetAbsolute, fastestMean, fastestMedian -->
        <selectorStrategy>fastestAbsolute</selectorStrategy>
        <!-- set the tuning auto tuning pipeline -->
        <!-- Leave this empty for an exhaustive full search or add any number of strategies that are applied in the stated order -->
        <tuningStrategies>ruleBasedTuning, predictiveTuning</tuningStrategies>
        <!-- autopas optimizes the simulation based on tuning metric: time, energy, default option is time -->
        <tuningMetric>energy</tuningMetric>
        <!-- Data layouts to be used: AoS, SoA -->
        <dataLayouts>SoA</dataLayouts>
        <!-- Allowed choices for newton 3 optimization: enabled, disabled -->
        <newton3>enabled</newton3>
        <!-- Only for Bayesian tuning strategies: sets the function that predicts knowledge gain from samples -->
        <tuningAcquisitionFunction>upper-confidence-bound</tuningAcquisitionFunction>
        <!-- How many iterations before retuning -->
        <tuningInterval>1000</tuningInterval>
        <!-- How many samples should the tuner take for each tested combination (=1 Evidence) -->
        <tuningSamples>5</tuningSamples>
        <!-- How many evidences a tuning strategy should sample (not used by all strategies, i.e. fullSearch) -->
        <maxEvidence>20</maxEvidence>
        <!-- Number of iterations after which autopas rebuilds it's containers -->
        <rebuildFrequency>6</rebuildFrequency>
        <!-- Verlet skin as absolute length added to the cutoff -->
        <skin>0.2</skin>
      </datastructure>

      <!-- cutoff definitions -->
      <cutoffs type="CenterOfMass" >
        <!-- Lennard Jones cutoff radius -->
        <radiusLJ unit="reduced" >5.0</radiusLJ>
        <!-- Tersoff cutoff radius -->
        <radiusTersoff>1.0</radiusTersoff>
      </cutoffs>

      <electrostatic type="ReactionField" >
        <epsilon>1.0e+10</epsilon>
      </electrostatic>

      <!-- velocity scaling thermostat, if no component is specified the global thermostat is assumed -->
      <thermostat type="VelocityScaling" component="1">
        <!-- target temperature, if not specified the ensemble temperature will be used -->
        <temperature>0.7</temperature>
      </thermostat>
    </algorithm>

    <!-- output plugins
	There are several output plugins which can be used to generate some output files while running simulations.
	The following comments describe the provided output plugins. -->

	<!-- general information about properties of the output plugins:
    The attribute “name“ holds the name of the plugin user want to use performing an output. The names of the provided plugins are listed below:
      - CheckpointWriter
      - ResultWriter
      - XyzWriter
      - MmspdWriter
      - PovWriter
      - StatisticsWriter
      - DecompWriter
    The element “writefrequency” contains a integer value which controls the frequency of writing out the data. For example the value “10” makes
    sure that every 10th timestep data will be written out.
    The element “outputprefix” holds a string which defines the prefix of the output filename. For example the string “default” will result
    in a output file named “default.res”. -->
    <output>

       <!-- CheckpointWriter plugin
      This writer will create a restart file which format or structure is the same as used by input files *.inp.
      These files can be used to continue a simulation. -->
      <outputplugin name="CheckpointWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

      <!-- Flop counter plugin
      This writer outputs the actual FLOPS rate of the force calculations. -->
      <outputplugin name="FlopRateWriter">
		<mode>stdout</mode>
        <writefrequency>10</writefrequency>
      </outputplugin>

      <!-- SysMonOutput
       system monitor output for an RPN expression
      -->
      <outputplugin name="SysMonOutput">
        <expression>procloadavg:loadavg1</expression>
        <expression label="Free+BufferRAM [MB]">sysinfo:freeram sysinfo:bufferram + sysinfo:mem_unit * float 1048576 /</expression>
        <expression>procselfstatm:size 1048576. /</expression>
        <writefrequency>10</writefrequency>
      </outputplugin>

      <!-- ResultWriter plugin
        Writes thermodynamic properties to a file. The following values will be written to a file:
        - Simulation time step
        - time since the simulation started
        - Average potential Energy
        - Pressure
        - BetaTrans
        - BetaRot
        - Specific heat capacity (constant volume) -->
      <outputplugin name="ResultWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
        <accumulation_steps>1000</accumulation_steps>
      </outputplugin>

      <!-- RDF plugin
      This module writes out Radial Distribution Function data -->
      <outputplugin name="RDF">
	  	<!-- functionality affected by <equilibration> <steps> X </steps> </equilibration> -->
        <writefrequency>100</writefrequency>
	    <samplingfrequency>5</samplingfrequency>
        <outputprefix>default</outputprefix>
        <bins>1000</bins>
        <intervallength>0.003</intervallength>
      </outputplugin>

      <!-- visualization output plugins
      These writers are used to generate files which can be used for visualization purpose by different visualization software.
      Depending on the specific software different file formats are supported. -->

      <!-- XyzWriter plugin
      The *.xyz-format contains x, y, z coordinates of the molecules. Such a file can be read by visualization software like vmd
      (for detail information visit: http://www.ks.uiuc.edu/Research/vmd/). -->
      <outputplugin name="XyzWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

      <!-- MmspdWriter plugin
       The *.mmspd-format contains the coordinates of the molecules and information about the dimensions of the simulation box.
       The file can be read by the software MegaMol (for detail information visit: https://svn.vis.uni-stuttgart.de/trac/megamol/). -->
      <outputplugin name="MmspdWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

      <!-- PovWriter
      This writer creates a file containing the current state of simulation in *.pov-format. It can be used to visualize with
      POVray software (for detail information visit: www.povray.org). -->
      <outputplugin name="PovWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

      <!-- MPICheckpointWriter
       write binary data for checkpointing using MPIIO
       there might be some problems with "external32" data representation; better use "native" or "internal"
      -->
      <outputplugin name="MPICheckpointWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
        <appendTimestamp>true</appendTimestamp>
        <datarep>native</datarep>
        <measureTime>1</measureTime>
      </outputplugin>

      <!-- more output plugins -->

      <!-- StatisticsWriter
      This writer writes plot statistics to a file. At the moment, only a histogramm showing the occupancy of the cells is produced.
        - x: number of Molecules
        - y: number of cells with the respective number of molecules -->
      <outputplugin name="StatisticsWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

      <!-- DecompWriter
      This writer writes out information about the decomposition of the simulation domain. -->
      <outputplugin name="DecompWriter">
        <writefrequency>10</writefrequency>
        <outputprefix>default</outputprefix>
      </outputplugin>

    </output>
  </simulation>
</mardyn>
